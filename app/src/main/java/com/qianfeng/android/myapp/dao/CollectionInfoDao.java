package com.qianfeng.android.myapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.qianfeng.android.myapp.dao.CollectionInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECTION_INFO".
*/
public class CollectionInfoDao extends AbstractDao<CollectionInfo, Long> {

    public static final String TABLENAME = "COLLECTION_INFO";

    /**
     * Properties of entity CollectionInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServiceTitle = new Property(1, String.class, "serviceTitle", false, "SERVICE_TITLE");
        public final static Property Count = new Property(2, String.class, "count", false, "COUNT");
        public final static Property Evaluate = new Property(3, String.class, "evaluate", false, "EVALUATE");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
        public final static Property Tag1 = new Property(5, String.class, "tag1", false, "TAG1");
        public final static Property Tag2 = new Property(6, String.class, "tag2", false, "TAG2");
    };


    public CollectionInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECTION_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SERVICE_TITLE\" TEXT NOT NULL ," + // 1: serviceTitle
                "\"COUNT\" TEXT NOT NULL ," + // 2: count
                "\"EVALUATE\" TEXT NOT NULL ," + // 3: evaluate
                "\"IMAGE\" TEXT NOT NULL ," + // 4: image
                "\"TAG1\" TEXT NOT NULL ," + // 5: tag1
                "\"TAG2\" TEXT NOT NULL );"); // 6: tag2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECTION_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CollectionInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getServiceTitle());
        stmt.bindString(3, entity.getCount());
        stmt.bindString(4, entity.getEvaluate());
        stmt.bindString(5, entity.getImage());
        stmt.bindString(6, entity.getTag1());
        stmt.bindString(7, entity.getTag2());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CollectionInfo readEntity(Cursor cursor, int offset) {
        CollectionInfo entity = new CollectionInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // serviceTitle
            cursor.getString(offset + 2), // count
            cursor.getString(offset + 3), // evaluate
            cursor.getString(offset + 4), // image
            cursor.getString(offset + 5), // tag1
            cursor.getString(offset + 6) // tag2
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CollectionInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServiceTitle(cursor.getString(offset + 1));
        entity.setCount(cursor.getString(offset + 2));
        entity.setEvaluate(cursor.getString(offset + 3));
        entity.setImage(cursor.getString(offset + 4));
        entity.setTag1(cursor.getString(offset + 5));
        entity.setTag2(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CollectionInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CollectionInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
